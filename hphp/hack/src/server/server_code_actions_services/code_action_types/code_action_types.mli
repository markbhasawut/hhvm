(*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the "hack" directory of this source tree.
 *
 *)
(** Internal representations for code actions for refactoring *)
type edit = {
  pos: Pos.t;
  text: string;
}

type edits = edit list Relative_path.Map.t

module Refactor : sig
  type t = {
    title: string;
    edits: edits Lazy.t;
  }

  type find =
    entry:Provider_context.entry -> Pos.t -> Provider_context.t -> t list
end

(** Internal representation for code actions for quickfixes.
  * Note that we do not include diagnostics.
  * We can tell LSP which error this fixed, but we'd have to
  * recompute the diagnostic from the error and there's no clear benefit *)
module Quickfix : sig
  type t = {
    title: string;
    edits: edits Lazy.t;
  }
end

module Type_string : sig
  (** A representation of a type for use in code generated by code actions.
     `to_string` produces "as useful as possible" Hack source code:
         - fully expand types
         - avoid truncating types (especially important for nested shapes)
         - *do* emit non-denotable types like unions. Then we can at least give the user a starting-point for
         writing source code: a single union in a shape type shouldn't prevent us from providing most of the shape type for the user.
  *)
  type t

  val of_locl_ty : Tast_env.t -> Typing_defs.locl_ty -> t

  val to_string : t -> string
end
